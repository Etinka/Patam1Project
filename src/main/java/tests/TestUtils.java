package tests;

import algorithms.*;
import models.PuzzleState;
import models.State;
import solver.AlgoSolution;
import solver.PipesPuzzleSolution;
import solver.Solution;

import java.util.ArrayList;
import java.util.List;

class TestUtils {

    static Solution createSolution() {
        char[][] table =
                {{'s', '|', 'L'},
                        {'F', '|', 'J'},
                        {'L', '|', 'g'}};
        char[][] table2 =
                {{'s', '|', 'J'},
                        {'F', '|', 'J'},
                        {'L', '|', 'g'}};
        char[][] table3 =
                {{'s', '|', '7'},
                        {'F', '|', 'J'},
                        {'L', '|', 'g'}};
        char[][] table4 =
                {{'s', '|', '7'},
                        {'F', '-', 'J'},
                        {'L', '|', 'g'}};
        PuzzleState puzzleState = new PuzzleState(table, 3);
        PuzzleState puzzleState2 = new PuzzleState(table2, 3);
        puzzleState2.setCameFrom(puzzleState);
        PuzzleState puzzleState3 = new PuzzleState(table3, 3);
        puzzleState3.setCameFrom(puzzleState2);
        PuzzleState puzzleState4 = new PuzzleState(table4, 3);
        puzzleState4.setCameFrom(puzzleState3);

        List<State<?>> states = new ArrayList<>();
        states.add(puzzleState2);
        states.add(puzzleState3);
        states.add(puzzleState4);


        return new AlgoSolution(states, puzzleState, puzzleState2);
    }

    static char[][] convertStringToChar(String levelString, int rowNum, int colNum) {
        char[][] level = new char[rowNum][colNum];
        for (int i = 0; i < rowNum; i++) {
            level[i] = new char[colNum];
            level[i] = levelString.substring(i * colNum, (i * colNum) + colNum).toCharArray();
        }
        return level;
    }

    static PipesPuzzleSolution createPipesPuzzleSolution(String className, int board) {
        Searcher searcher = null;
        if (className.equals(BestFirstSearch.class.getName())) {
            searcher = new BestFirstSearch();
        } else if (className.equals(BFS.class.getName())) {
            searcher = new BFS();
        } else if (className.equals(DFS.class.getName())) {
            searcher = new DFS();
        } else if (className.equals(HillClimbing.class.getName())) {
            searcher = new HillClimbing();
        }
        PipesPuzzleSolution solution = new PipesPuzzleSolution(searcher.search(TestUtils.createPuzzle(board)));
        return solution;

    }

    public static PipesPuzzle createPuzzle(int board) {
        PuzzleState state;
        switch (board) {
            case 1:
                state = TestUtils.getSmallBoard3on7();
                break;
            case 2:
                state = TestUtils.getMediumBoard();
                break;
            case 3:
                state = TestUtils.getMediumBoard10on5();
                break;
            case 4:
                state = TestUtils.getHugeBoard();
                break;
            case 5:
                state = TestUtils.getLargeBoard();
                break;
            default:
                state = TestUtils.getSmallBoard2on2();
                break;
        }


        int numRows = state.getState().length;
        int numCols = state.getState()[0].length;
        return new PipesPuzzle(state, numRows, numCols);
    }

    public static PuzzleState getSmallBoard2on2() {
        char[][] board = {
                {'s', 'L'},
                {'F', 'g'}
        };
        return new PuzzleState(board, board.length);
    }

    public static PuzzleState getSmallBoard3on7() {
        char[][] board = {
                {'s', '|', '|', '|', '|', '|', 'L'},
                {' ', ' ', ' ', ' ', ' ', ' ', '-'},
                {' ', ' ', ' ', ' ', 'g', '-', 'L'}
        };
        return new PuzzleState(board, board.length);
    }

    public static PuzzleState getMediumBoard10on5() {
        char[][] board = {
                {'s', '|', '|', '7', '|'},
                {' ', ' ', ' ', '-', ' '},
                {' ', ' ', ' ', '-', ' '},
                {'|', '-', '-', 'J', 'L'},
                {' ', ' ', ' ', ' ', '-'},
                {' ', ' ', ' ', ' ', '-'},
                {' ', ' ', ' ', ' ', 'g'},
                {' ', ' ', ' ', ' ', ' '},
                {' ', ' ', ' ', ' ', ' '},
                {' ', ' ', ' ', ' ', ' '}};
        return new PuzzleState(board, board.length);
    }

    public static PuzzleState getMediumBoard() {
        char[][] board = {
                {'s', '-', '-', '-', '-', '-', '-', 'L'},
                {'L', '-', '|', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '-', '-', '-', 'L'},
                {'L', '-', '|', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '-', '-', '-', 'L'},
                {'L', '-', '|', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '|', '-', '-', '-', 'g'}
        };
        return new PuzzleState(board, board.length);
    }

    public static PuzzleState getHugeBoard() {
        char[][] board = {
                {'s', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', 'g'}
        };
        return new PuzzleState(board, board.length);
    }

    public static PuzzleState getLargeBoard() {
        char[][] board = {
                {'s', '-', 'J', '|', '-', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '|', 'J', '-', '-', 'g'}
        };
        return new PuzzleState(board, board.length);
    }

    public static void main(String[] args) {
        System.out.println("**** Solver Unittest ****");

       /* char[][] board0 = {
                {'s', 'L'},
                {'F', 'g'}
        };
        char[][] board1 = {
                {'s', '|', '|', '|', '|', '|', 'L'},
                {' ', ' ', ' ', ' ', ' ', ' ', '-'},
                {' ', ' ', ' ', ' ', 'g', '-', 'L'}
        };
        char[][] board2 = {
                {'s', '|', '|', '7', '|'},
                {' ', ' ', ' ', '-', ' '},
                {' ', ' ', ' ', '-', ' '},
                {'|', '-', '-', 'J', 'L'},
                {' ', ' ', ' ', ' ', '-'},
                {' ', ' ', ' ', ' ', '-'},
                {' ', ' ', ' ', ' ', 'g'},
                {' ', ' ', ' ', ' ', ' '},
                {' ', ' ', ' ', ' ', ' '},
                {' ', ' ', ' ', ' ', ' '}
        };*/

        char[][] board3 = {
                {'s', '-', '-', '-', '-', '-', '-', 'L'},
                {'L', '-', '|', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '-', '-', '-', 'L'},
                {'L', '-', '|', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '-', '-', '-', 'L'},
                {'L', '-', '|', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '|', '-', '-', '-', 'g'}
        };
        char[][] board4 = {
                {'s', '-', 'J', '|', '-', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},

                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '-', '7', '-', '-', 'L'},
                {'L', '-', 'F', '-', '-', '|', '-', 'L'},
                {'L', '-', '-', '|', 'J', '-', '-', 'g'}
        };

        char[][] board5 = {
                {'s', '-', 'L'},
                {' ', ' ', '|'},
                {'L', ' ', 'g'}
        };

        char[][] board7 = {
                {'s', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', '7'},
//        		{'7','7','7','7','7','7','7','7','7','7'},
                {'7', '7', '7', '7', '7', '7', '7', '7', '7', 'g'}
        };


    /*    PipeGameBoard gameBoard = new PipeGameBoard(new Board(board7));

        //Solver solver = new PipeSolver(new BestFirstSearchSearcher());
        //Solver solver = new PipeSolver(new BFSSearcher());
        //Solver solver = new PipeSolver(new DFSSearcher());
        Solver solver = new PipeSolver(new AStarSearcher());
        //Solver solver = new PipeSolver(new HillClimbingSearcher());
        Solution solution = solver.solve(gameBoard);
        State<Board> myState = (State<Board>) solution.getGoalState();
        myState.getState().printState();*/

    }


}
